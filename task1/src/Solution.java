import java.util.HashMap;

public class Solution {

    /**
     * Method which gets 2 strings and finds a char which is added in t, but doesn't contains in s.
     * String t is generated by random shuffling string s and then add one more letter at a random position.
     *
     * Constraints:
     * - 0 <= s.length <= 1000
     * - t.length == s.length + 1
     * - s and t consist of lower-case English letters.
     *
     * if inputs aren't correct, then returns null
     *
     * @param s shorter string
     * @param t random shuffling string s
     * @return letter that was added to t
     */
    public Character findAddedLetter(String s, String t) {
        //checking if the inputs are correct
        if (s != null && t != null && s.length() <= 1000 && s.length() == t.length() - 1) {
            //getting maps from each input to compare them
            HashMap<Character, Integer> sMap = divideLetters(s);
            HashMap<Character, Integer> tMap = divideLetters(t);
            // answer to return
            Character answer = null;

            //comparing by tMap (map from t string)
            for (Character expectedAnswer : tMap.keySet()) {
                // check for lowercase
                boolean charIsCorrect = Character.isLowerCase(expectedAnswer);
                if (charIsCorrect && sMap.containsKey(expectedAnswer)) {
                    if (sMap.get(expectedAnswer) == tMap.get(expectedAnswer) - 1) {
                        answer = expectedAnswer;
                    } else if (!sMap.get(expectedAnswer).equals(tMap.get(expectedAnswer))) {
                        return null;
                    }
                } else if (charIsCorrect && tMap.get(expectedAnswer) == 1 && answer == null) {
                    answer = expectedAnswer;
                } else {
                    return null;
                }
            }
            return answer;
        }
        return null;
    }

    /**
     * Method, which gets a string and makes map from them,
     * where key is a letter itself and value is the amount of his existence in input.
     *
     * @param letters letters to divide
     * @return map of letters
     */
    private HashMap<Character, Integer> divideLetters(String letters) {
        HashMap<Character, Integer> map = new HashMap<>();
        for (char letter : letters.toCharArray()) {
            if (map.containsKey(letter)) {
                map.replace(letter, map.get(letter) + 1);
            } else {
                map.put(letter, 1);
            }
        }
        return map;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        System.out.println(solution.findAddedLetter("abcd", "abcde"));
        System.out.println(solution.findAddedLetter("", "y"));
        System.out.println(solution.findAddedLetter("a", "aa"));
        System.out.println(solution.findAddedLetter("ae", "aea"));
    }
}
